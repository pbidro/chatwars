{"ast":null,"code":"import \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.string.match.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { CollapseTransition } from 'vue2-transitions';\nexport default {\n  name: 'sidebar-item',\n  components: {\n    CollapseTransition: CollapseTransition\n  },\n  props: {\n    menu: {\n      type: Boolean,\n      default: false,\n      description: \"Whether the item is a menu. Most of the item it's not used and should be used only if you want to override the default behavior.\"\n    },\n    link: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: '',\n          path: '',\n          children: []\n        };\n      },\n      description: 'Sidebar link. Can contain name, path, icon and other attributes. See examples for more info'\n    }\n  },\n  provide: function provide() {\n    return {\n      addLink: this.addChild,\n      removeLink: this.removeChild\n    };\n  },\n  inject: {\n    addLink: {\n      default: null\n    },\n    removeLink: {\n      default: null\n    },\n    autoClose: {\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      children: [],\n      collapsed: true\n    };\n  },\n  computed: {\n    baseComponent: function baseComponent() {\n      return this.isMenu || this.link.isRoute ? 'li' : 'router-link';\n    },\n    linkPrefix: function linkPrefix() {\n      if (this.link.name) {\n        var words = this.link.name.split(' ');\n        return words.map(function (word) {\n          return word.substring(0, 1);\n        }).join('');\n      }\n    },\n    isMenu: function isMenu() {\n      return this.children.length > 0 || this.menu === true;\n    },\n    isActive: function isActive() {\n      var _this = this;\n\n      if (this.$route && this.$route.path) {\n        var matchingRoute = this.children.find(function (c) {\n          return _this.$route.path.startsWith(c.link.path);\n        });\n\n        if (matchingRoute !== undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  },\n  methods: {\n    addChild: function addChild(item) {\n      var index = this.$slots.default.indexOf(item.$vnode);\n      this.children.splice(index, 0, item);\n    },\n    removeChild: function removeChild(item) {\n      var tabs = this.children;\n      var index = tabs.indexOf(item);\n      tabs.splice(index, 1);\n    },\n    elementType: function elementType(link) {\n      var isParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (link.isRoute === false) {\n        return isParent ? 'li' : 'a';\n      } else {\n        return 'router-link';\n      }\n    },\n    linkAbbreviation: function linkAbbreviation(name) {\n      var matches = name.match(/\\b(\\w)/g);\n      return matches.join('');\n    },\n    linkClick: function linkClick() {\n      if (this.autoClose && this.$sidebar && this.$sidebar.showSidebar === true) {\n        this.$sidebar.displaySidebar(false);\n      }\n    },\n    collapseMenu: function collapseMenu() {\n      this.collapsed = !this.collapsed;\n    },\n    collapseSubMenu: function collapseSubMenu(link) {\n      link.collapsed = !link.collapsed;\n    }\n  },\n  mounted: function mounted() {\n    if (this.addLink) {\n      this.addLink(this);\n    }\n\n    if (this.link.collapsed !== undefined) {\n      this.collapsed = this.link.collapsed;\n    }\n\n    if (this.isActive && this.isMenu) {\n      this.collapsed = false;\n    }\n  },\n  destroyed: function destroyed() {\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n\n    if (this.removeLink) {\n      this.removeLink(this);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AAEA;EACAA,oBADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC;MACAC,aADA;MAEAC,cAFA;MAGAC,aACA;IAJA,CADA;IAOAC;MACAH,YADA;MAEAC;QACA;UACAN,QADA;UAEAS,QAFA;UAGAC;QAHA;MAKA,CARA;MASAH,aACA;IAVA;EAPA,CALA;EAyBAI,OAzBA,qBAyBA;IACA;MACAC,sBADA;MAEAC;IAFA;EAIA,CA9BA;EA+BAC;IACAF;MAAAN;IAAA,CADA;IAEAO;MAAAP;IAAA,CAFA;IAGAS;MACAT;IADA;EAHA,CA/BA;EAsCAU,IAtCA,kBAsCA;IACA;MACAN,YADA;MAEAO;IAFA;EAIA,CA3CA;EA4CAC;IACAC,aADA,2BACA;MACA;IACA,CAHA;IAIAC,UAJA,wBAIA;MACA;QACA;QACA;UAAA;QAAA;MACA;IACA,CATA;IAUAC,MAVA,oBAUA;MACA;IACA,CAZA;IAaAC,QAbA,sBAaA;MAAA;;MACA;QACA;UAAA,OACA,yCADA;QAAA;;QAGA;UACA;QACA;MACA;;MACA;IACA;EAvBA,CA5CA;EAqEAC;IACAC,QADA,oBACAC,IADA,EACA;MACA;MACA;IACA,CAJA;IAKAC,WALA,uBAKAD,IALA,EAKA;MACA;MACA;MACAE;IACA,CATA;IAUAC,WAVA,uBAUApB,IAVA,EAUA;MAAA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAhBA;IAiBAqB,gBAjBA,4BAiBA7B,IAjBA,EAiBA;MACA;MACA;IACA,CApBA;IAqBA8B,SArBA,uBAqBA;MACA,IACA,kBACA,aADA,IAEA,kCAHA,EAIA;QACA;MACA;IACA,CA7BA;IA8BAC,YA9BA,0BA8BA;MACA;IACA,CAhCA;IAiCAC,eAjCA,2BAiCAxB,IAjCA,EAiCA;MACAA;IACA;EAnCA,CArEA;EA0GAyB,OA1GA,qBA0GA;IACA;MACA;IACA;;IACA;MACA;IACA;;IACA;MACA;IACA;EACA,CApHA;EAqHAC,SArHA,uBAqHA;IACA;MACA;IACA;;IACA;MACA;IACA;EACA;AA5HA","names":["name","components","CollapseTransition","props","menu","type","default","description","link","path","children","provide","addLink","removeLink","inject","autoClose","data","collapsed","computed","baseComponent","linkPrefix","isMenu","isActive","methods","addChild","item","removeChild","tabs","elementType","linkAbbreviation","linkClick","collapseMenu","collapseSubMenu","mounted","destroyed"],"sourceRoot":"src/components/admin/SidebarPlugin","sources":["SidebarItem.vue"],"sourcesContent":["<template>\n  <b-nav-item\n    :is=\"baseComponent\"\n    :to=\"link.path ? link.path : '/'\"\n    class=\"nav-item\"\n    :class=\"{ active: isActive }\"\n  >\n    <a\n      v-if=\"isMenu\"\n      class=\"sidebar-menu-item nav-link\"\n      :class=\"{ active: isActive }\"\n      :aria-expanded=\"!collapsed\"\n      data-toggle=\"collapse\"\n      @click.prevent=\"collapseMenu\"\n    >\n      <template v-if=\"addLink\">\n        <span class=\"nav-link-text\">\n          {{ link.name }} <b class=\"caret\"></b>\n        </span>\n      </template>\n      <template v-else>\n        <i :class=\"link.icon\"></i>\n        <span class=\"nav-link-text\">{{ link.name }} <b class=\"caret\"></b></span>\n      </template>\n    </a>\n\n    <collapse-transition>\n      <div\n        v-if=\"$slots.default || this.isMenu\"\n        v-show=\"!collapsed\"\n        class=\"collapse show\"\n      >\n        <ul class=\"nav nav-sm flex-column\">\n          <slot></slot>\n        </ul>\n      </div>\n    </collapse-transition>\n\n    <slot\n      name=\"title\"\n      v-if=\"children.length === 0 && !$slots.default && link.path\"\n    >\n      <component\n        :to=\"link.path\"\n        @click.native=\"linkClick\"\n        :is=\"elementType(link, false)\"\n        class=\"nav-link\"\n        :class=\"{ active: link.active }\"\n        :target=\"link.target\"\n        :href=\"link.path\"\n      >\n        <template v-if=\"addLink\">\n          <span class=\"nav-link-text\">{{ link.name }}</span>\n        </template>\n        <template v-else>\n          <i :class=\"link.icon\"></i>\n          <span class=\"nav-link-text\">{{ link.name }}</span>\n        </template>\n      </component>\n    </slot>\n  </b-nav-item>\n</template>\n<script>\nimport { CollapseTransition } from 'vue2-transitions';\n\nexport default {\n  name: 'sidebar-item',\n  components: {\n    CollapseTransition\n  },\n  props: {\n    menu: {\n      type: Boolean,\n      default: false,\n      description:\n        \"Whether the item is a menu. Most of the item it's not used and should be used only if you want to override the default behavior.\"\n    },\n    link: {\n      type: Object,\n      default: () => {\n        return {\n          name: '',\n          path: '',\n          children: []\n        };\n      },\n      description:\n        'Sidebar link. Can contain name, path, icon and other attributes. See examples for more info'\n    }\n  },\n  provide() {\n    return {\n      addLink: this.addChild,\n      removeLink: this.removeChild\n    };\n  },\n  inject: {\n    addLink: { default: null },\n    removeLink: { default: null },\n    autoClose: {\n      default: true\n    }\n  },\n  data() {\n    return {\n      children: [],\n      collapsed: true\n    };\n  },\n  computed: {\n    baseComponent() {\n      return this.isMenu || this.link.isRoute ? 'li' : 'router-link';\n    },\n    linkPrefix() {\n      if (this.link.name) {\n        let words = this.link.name.split(' ');\n        return words.map(word => word.substring(0, 1)).join('');\n      }\n    },\n    isMenu() {\n      return this.children.length > 0 || this.menu === true;\n    },\n    isActive() {\n      if (this.$route && this.$route.path) {\n        let matchingRoute = this.children.find(c =>\n          this.$route.path.startsWith(c.link.path)\n        );\n        if (matchingRoute !== undefined) {\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n  methods: {\n    addChild(item) {\n      const index = this.$slots.default.indexOf(item.$vnode);\n      this.children.splice(index, 0, item);\n    },\n    removeChild(item) {\n      const tabs = this.children;\n      const index = tabs.indexOf(item);\n      tabs.splice(index, 1);\n    },\n    elementType(link, isParent = true) {\n      if (link.isRoute === false) {\n        return isParent ? 'li' : 'a';\n      } else {\n        return 'router-link';\n      }\n    },\n    linkAbbreviation(name) {\n      const matches = name.match(/\\b(\\w)/g);\n      return matches.join('');\n    },\n    linkClick() {\n      if (\n        this.autoClose &&\n        this.$sidebar &&\n        this.$sidebar.showSidebar === true\n      ) {\n        this.$sidebar.displaySidebar(false);\n      }\n    },\n    collapseMenu() {\n      this.collapsed = !this.collapsed;\n    },\n    collapseSubMenu(link) {\n      link.collapsed = !link.collapsed;\n    }\n  },\n  mounted() {\n    if (this.addLink) {\n      this.addLink(this);\n    }\n    if (this.link.collapsed !== undefined) {\n      this.collapsed = this.link.collapsed;\n    }\n    if (this.isActive && this.isMenu) {\n      this.collapsed = false;\n    }\n  },\n  destroyed() {\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n    if (this.removeLink) {\n      this.removeLink(this);\n    }\n  }\n};\n</script>\n<style>\n.sidebar-menu-item {\n  cursor: pointer;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}